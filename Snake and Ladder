/*
Given a snake and ladder board of order 5x6, find the minimum number of dice throws required to reach the destination or last cell (30th cell) from source (1st cell) . 
*/

#include <bits/stdc++.h>
using namespace std;

int calc(int move[],int n)
{
int visited[31]={0};
queue<pair<int,int>>q;
q.push(make_pair(0,0));
pair<int,int>q1;
while(!q.empty())
{ 
    q1=q.front();
    int v=q1.first;
    if(v==n-1)
    break;
    q.pop();
    for(int j=v+1;j<=(v+6)&&j<n;j++)
    {    pair<int,int>q2;
        if(!visited[j])
        {
            q2.second=q1.second+1;
            visited[j]=1;
        }
        if(move[j]!=-1)
        {
            q2.first=move[j];
        }
        else
        q2.first=j;
        q.push(q2);
    }
}
return q1.second;

}
int main() {
	//code
	int t;
	cin>>t;
	
	while(t--)
	{   int move[31];
	    int a,b,i,j,n;
	    for(i=0;i<31;i++)
	    move[i]=-1;
	    cin>>n;
	    for(i=0;i<n;i++)
	    {cin>>a>>b;
	    move[a-1]=b-1;
	    }
	    cout<<calc(move,30)<<endl;
	    
	}
	return 0;
}
