/*
Given a boolean 2D matrix (0-based index), find whether there is path from (0,0) to (x,y) and if there is one path,
print the minimum no of steps needed to reach it, else print -1 if the destination is not reachable. 
You may move in only four direction ie up, down, left and right. The path can only be created out of a cell if its value is 1.
*/
//code

#include <bits/stdc++.h>
using namespace std;

bool cor(int x,int y,int m,int n)
{
    if(0<=x and x<n and 0<=y and y<m)
    return true;
    return false;
}
int check(int a[22][22],int n,int m,pair<int,int>p1)
{
int ans=-1;
bool flag=false;
if(a[0][0]==0)
return -1;
queue<pair<pair<int,int>,int> >q;
int i,j,count,visited[22][22]={0};
int a1[]={0,0,1,-1};
int b[]={1,-1,0,0};
q.push(make_pair(make_pair(0,0),0));
visited[0][0]=1;
for(i=0;i<n;i++)
for(j=0;j<m;j++)
{
	if(a[i][j]==0)
	visited[i][j]=1;
}
pair<pair<int,int>,int>p;
while(!q.empty())
{
    p=q.front();
    q.pop();
    //cout<<p.first.first<<" "<<p1.first <<" "<<p.first.second<<" "<<p1.second<<endl;
    if(p.first.first==p1.first and p.first.second==p1.second)
    {
        flag=true;
        break;
    }
    for(i=0;i<4;i++)
    {
        int x=p.first.first+a1[i];
        int y=p.first.second+b[i];
        if(!visited[x][y] and cor(x,y,m,n))
        { visited[x][y]=1;
          q.push(make_pair(make_pair(x,y),p.second+1));
            
        }
    }
}
if(flag)
return p.second;
else
return -1;
}
int main() {
	//code
	int t;
	cin>>t;
	while(t--)
	{
	    int n,m;
	    cin>>n>>m;
	    int a[22][22];
	    int i,j,k;
	    for(i=0;i<n;i++)
	    for(j=0;j<m;j++)
	    cin>>a[i][j];
	    pair<int,int>p;
	    int a1,b;
	    cin>>a1>>b;
	    p=make_pair(a1,b);
	    cout<<check(a,n,m,p)<<endl;
	}
	return 0;
}
